name: Publish npm pacakge
on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@allenyummy'
      
      - name: install python3
        run: sudo apt-get install -y python3
      
      - name: get remote versions and set output for 'steps.remote.outputs.remote-versions'
        id: remote
        run: |
          remoteVers=$(npm show @allenyummy/npm_pkg_playground versions --json)||remoteVers=[]
          remoteVersInOneLine=`python3 << END
          processStr = '[' + ','.join([f"'{str(ver)}'" for ver in $remoteVers]) + ']'
          print (processStr)
          END`
          echo "remote-versions=$remoteVersInOneLine" >> $GITHUB_OUTPUT
          echo "remoteVers: ${{ steps.remote.outputs.remote-versions }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version has been updated and set output for 'steps.check.outputs.[changed/version/type/commit]'
        id: check
        uses: EndBug/version-check@v2
        with:
          diff-search: true
          
      - name: set output for 'steps.compare.outputs.should-release'
        id: compare
        run: |
          remoteVers=${{ steps.remote.outputs.remote-versions }}
          checkChanged=${{ steps.check.outputs.changed }}
          checkNewVersion=${{ steps.check.outputs.version }}
          checkType=${{ steps.check.outputs.type }} // patch, minor, major 
          checkCommit=${{ steps.check.outputs.commit }}
          
          if [[ $checkChanged = "false" ]]; then
             echo "should-release=false" >> $GITHUB_OUTPUT
             exit 1
          fi
          
          if [[ $checkChanged = "true" ]] && [[ $checkType != "patch" ]]; then
             echo "should-release=false" >> $GITHUB_OUTPUT
             exit 1
          fi
          
          isAlreadyPublished=`python3 << END
          print ('$checkNewVersion' in $remoteVers)
          END`
          if [[ $isAlreadyPublished = "true" ]]; then
             echo "should-release=false" >> $GITHUB_OUTPUT
             exit 1
          fi
      
          echo "should-release=true" >> $GITHUB_OUTPUT

      - name: npm publish if patch version is changed and never published yet
        run: npm publish
        if: steps.compare.outputs.should-release == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
